#!/usr/bin/env python3

import numpy as np
from matplotlib import pyplot as plt
import re

outfile = 'trunc-mt.out.remote'
lpat = re.compile(r'\w+')
npat = re.compile(r'\d+')

def load():
    data = {}
    with open(outfile) as file:
        for line in file:
            try:
                expr, value = line.split('=')
                l = lpat.match(expr)[0]
                n = float(npat.search(expr)[0])
                value = float(value)
                if l in data:
                    data[l].append([n, value])
                else:
                    data[l] = [[n, value]]
            except ValueError:
                pass
    return {l: np.array(data[l]) for l in data}

data = load()
for l in data:
    print(f'{l}:')
    print(data[l])

class UpperEnvelope:

    def __init__(self):
        self.n = 0
        self.xsum = 0
        self.ysum = 0
        self.xysum = 0
        self.x2sum = 0
        self.y2sum = 0
        self.data = []

    @property
    def a(self):
        return (
            self.n * self.xysum - self.xsum * self.ysum
        ) / (
            self.n * self.x2sum - self.xsum * self.xsum
        )

    @property
    def b(self):
        return (self.ysum / self.n) - self.a * (self.xsum / self.n)

    @property
    def r(self):
        return (
            self.n * self.xysum - self.xsum * self.ysum
        ) / np.sqrt((
            self.n * self.x2sum - self.xsum * self.xsum
        ) * (
            self.n * self.y2sum - self.ysum * self.ysum
        ))

    def addPoint(self, x, y):
        self.n += 1
        self.xsum += x
        self.ysum += y
        self.xysum += x * y
        self.x2sum += x * x
        self.y2sum += y * y
        self.data.append([x, y])

    def purify(self, n_new=2):
        if n_new < 2:
            raise ValueError('too small ratio')
        while self.n > n_new:
            a = self.a
            b = self.b
            data_new = []
            for x, y in self.data:
                if a * x + b <= y:
                    data_new.append([x, y])
                else:
                    self.xsum -= x
                    self.ysum -= y
                    self.xysum -= x * y
                    self.x2sum -= x * x
                    self.y2sum -= y * y
            self.data = data_new
            self.n = len(self.data)

logdf = np.log(np.abs(data['df'][10000:])) / np.log(10)
logdf_ue = UpperEnvelope()
for logl, logd in logdf:
    logdf_ue.addPoint(logl, logd)
logdf_ue.purify(2)
a = logdf_ue.a
b = logdf_ue.b
print(f'logd = {a} * logl + {b}, r = {logdf_ue.r}')
logue = a * logdf[:,0] + b
logd_0 = -4
logl_0 = (logd_0 - b) / a
print(f'{logl_0}, {logd_0}')
print(f'{np.exp(logl_0 * np.log(10))}, {np.exp(logd_0 * np.log(10))}')
logd_0 = -5
logl_0 = (logd_0 - b) / a
print(f'{logl_0}, {logd_0}')
print(f'{np.exp(logl_0 * np.log(10))}, {np.exp(logd_0 * np.log(10))}')

plt.title('value of function progression $f_l(q^2 = 0.5)$')
plt.xscale('log')
plt.xlabel('$l$')
plt.ylabel('$f_l(q^2 = 0.5)$')
plt.plot(data['f'][1:,0], np.abs(data['f'][1:,1]))
plt.savefig(__file__ + '-func.pdf')
plt.show()

plt.title('absolute value of function progression item $\Delta f_l(q^2 = 0.5)$')
plt.xscale('log')
plt.yscale('log')
plt.xlabel('$l$')
plt.ylabel('$|\Delta f_l(q^2 = 0.5)|$')
plt.plot(data['df'][1:,0], np.abs(data['df'][1:,1]))
plt.savefig(__file__ + '-raw.pdf')
plt.show()

plt.title('absolute value of function progression item $\Delta f_l(q^2 = 0.5)$')
plt.xlabel('$\log_{10}l$')
plt.ylabel('$\log_{10}|\Delta f_l(q^2 = 0.5)|$')
plt.plot(logdf[:,0], logdf[:,1], 'lightblue', label='observed')
plt.plot(logdf[:,0], logue, 'blue', label='upper envelope')
plt.plot([logdf[-1,0], logl_0], [logue[-1], logd_0], '--', color='blue', label='estimated')
plt.plot([logdf[-1,0], logl_0], [logue[-1], logd_0], 'o', color='blue')
plt.legend()
plt.savefig(__file__ + '.pdf')
plt.show()
